package troll.kotlin.coroutinesimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOnimport kotlinx.coroutines.flow.mapimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport troll.eth.base.viewbinding.BaseViewModelclass FlowViewModel : BaseViewModel() {    fun testFlow() {        viewModelScope.launch {            flow<Int> { }                .flowOn(Dispatchers.Main)                .collect {                }        }    }    fun overFresh() = flow {        while (true) {            for (i in 0 until Int.MAX_VALUE) {                emit(i)                delay(500)            }        }    }}// 代码段8fun main() = runBlocking {    val flow = flow {        emit(1)        emit(2)        throw IllegalStateException()        emit(3)    }    flow.map { it * 2 }        .catch { println("catch: $it") } // 注意这里        .collect {            println(it)        }}
package troll.kotlin.coroutinesimport android.view.LayoutInflaterimport androidx.activity.viewModelsimport androidx.lifecycle.lifecycleScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.MainScopeimport kotlinx.coroutines.flow.flatMapLatestimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOnimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.sampleimport kotlinx.coroutines.launchimport troll.btc.extensions.onClickimport troll.btc.extensions.textChangeFlowimport troll.btc.log.TLogimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.databinding.ActivityCoroutinesBindingclass CoroutinesActivity : BaseActivity<ActivityCoroutinesBinding>() {    private val coroutinesVm: CoroutinesViewModel by viewModels()    private val flowVm: FlowViewModel by viewModels()    private val channelVm: ChannelViewModel by viewModels()    private val selectVm: SelectViewModel by viewModels()    override fun getBinding(inflater: LayoutInflater): ActivityCoroutinesBinding =        ActivityCoroutinesBinding.inflate(inflater)    override fun flowData() {    }    override fun flowView() {        bd.coroutinesOne.onClick {            lifecycleScope.launch {                with(coroutinesVm) {                    val userInfo = getUserInfo()                    val friend = getFriendList(userInfo)                    println(" ${getFeedList(friend)}")                }            }        }        bd.coroutinesJob.onClick().onEach {            TLog.i(message = "coroutinesJob 点击")        }.launchIn(MainScope())        bd.coroutinesSelect.onClick {            selectVm.selectChannel(lifecycleScope)        }        bd.coroutinesEt.textChangeFlow().flowOn(Dispatchers.IO)            .flatMapLatest { searchFlow(it.toString()) }.onEach {                updateUi(it)            }.launchIn(MainScope())        bd.coroutinesOverRefresh.onClick {            flowVm.overFresh().sample(1000).flowOn(Dispatchers.IO).onEach {                    TLog.i(message = "防过度刷新$it")                }.launchIn(MainScope())        }    }    private fun updateUi(it: List<String>) {        TLog.i(message = "输入框$it")    }    fun searchFlow(key: String) = flow { emit(search(key)) }    suspend fun search(key: String): List<String> {        return listOf("所有$key")    }}
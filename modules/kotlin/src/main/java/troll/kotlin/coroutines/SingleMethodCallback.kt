package troll.kotlin.coroutinesimport kotlinx.coroutines.suspendCancellableCoroutineimport kotlin.concurrent.threadimport kotlin.coroutines.resumeimport kotlin.coroutines.suspendCoroutine/** * author : TangPeng * date : 11/16/22 21:46 * description : */fun interface SingleMethodCallback {    fun onCallback(value: String)}fun runTask(callback: SingleMethodCallback) {    thread {        Thread.sleep(100)        callback.onCallback("接口转换成挂起函数")        Thread.sleep(3000)        callback.onCallback("结束")        Thread.sleep(3000)        callback.onCallback("开始")    }}suspend fun runTaskCancellableCoroutine() = suspendCancellableCoroutine<String> { suspend ->    runTask {        println("$it:::协程是否isActive  ${suspend.isActive  }  ${suspend.hashCode()}")        println("$it:::协程是否isCancelled  ${suspend.isCancelled}  ${suspend.hashCode()}")        if (it == "结束") {            suspend.cancel()        } else {            suspend.resume(it)        }    }}suspend fun runTaskSuspend() = suspendCoroutine<String> { continuation ->    runTask {        continuation.resume(it)    }}
package troll.kotlin.coroutinesimport androidx.lifecycle.LifecycleCoroutineScopeimport kotlinx.coroutines.*import kotlinx.coroutines.channels.Channelimport kotlinx.coroutines.channels.ProducerScopeimport kotlinx.coroutines.channels.actorimport kotlinx.coroutines.channels.produceimport troll.eth.base.viewbinding.BaseViewModelclass ChannelViewModel : BaseViewModel() {    val channel = Channel<Int>()    suspend fun send(lifeScope: LifecycleCoroutineScope) {        lifeScope.launch {            repeat(10) {                channel.send(it)                delay(200)            }            // 关闭            channel.close()        }    }    fun receive(lifeScope: LifecycleCoroutineScope) {        lifeScope.launch {            for (i in channel) {                println("receive: $i")            }            // 关闭后            println("closed")        }    }    /**     * produce 和 actor 是kotlin提供的构造者生产者与消费者便捷方法     * produce 启动一个生产者协程，并返回一个ReceiveChannel 在其他协程中接受数据     */    // 发送协程    private val produceChannel = CoroutineScope(Dispatchers.IO).produce {        repeat(10) {            send(it)            delay(200)        }    }    fun produceReceive(lifeScope: LifecycleCoroutineScope) {        lifeScope.launch {            for (i in produceChannel) {                println("lifeScope   receive: $i")            }        }        MainScope().launch {            for (i in produceChannel) {                println("MainScope receive: $i")            }        }    }    // 消费协程 actor    private val actorChannel = CoroutineScope(Dispatchers.IO).actor<Int> {        while (true) {            println("actorChannel: ${receive()}")        }    }    fun actorSend(lifeScope: LifecycleCoroutineScope) {        lifeScope.launch {            repeat(10) {                actorChannel.send(it)                delay(200)            }        }        MainScope().launch {            repeat(10) {                actorChannel.send(it.plus(100))                delay(100)            }        }    }}
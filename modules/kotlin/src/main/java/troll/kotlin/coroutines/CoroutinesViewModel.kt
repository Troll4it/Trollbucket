package troll.kotlin.coroutinesimport androidx.lifecycle.LifecycleCoroutineScopeimport kotlinx.coroutines.*import troll.btc.log.TLogimport troll.eth.base.viewbinding.BaseViewModelclass CoroutinesViewModel : BaseViewModel() {    /**     * Job的生命周期     */    fun job() {        runBlocking {            val job = launch (start = CoroutineStart.LAZY){                logX("Job start")                delay(1000)            }            delay(500L)            job.log()            job.start()  // 变化在这里            job.log()            delay(500L)            job.cancel()            delay(500L)            job.log()            delay(2000L)            job.invokeOnCompletion {            }            logX("Process end!")        }    }    //挂起函数// ↓    suspend fun getUserInfo(): String {        withContext(Dispatchers.IO) {            delay(1000L)        }        return "BoyCoder"    }    //挂起函数// ↓    suspend fun getFriendList(user: String): String {        withContext(Dispatchers.IO) {            delay(1000L)        }        return user.plus("Tom, Jack")    }    //挂起函数// ↓    suspend fun getFeedList(list: String): String {        withContext(Dispatchers.IO) {            delay(1000L)        }        return list.plus("{FeedList..}")    }}fun Job.log() {    logX(""" isActive = $isActive isCancelled = $isCancelled isCompleted = $isCompleted """.trimIndent())}fun logX(any: Any?) {    println("""================================$any Thread:${Thread.currentThread().name}================================""".trimIndent())}
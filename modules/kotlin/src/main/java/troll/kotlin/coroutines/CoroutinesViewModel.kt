package troll.kotlin.coroutinesimport androidx.lifecycle.LifecycleCoroutineScopeimport kotlinx.coroutines.*import troll.btc.constants.EMPTYimport troll.eth.base.viewbinding.BaseViewModelimport kotlin.system.measureTimeMillisclass CoroutinesViewModel : BaseViewModel() {    private val scope = MainScope()    fun testDeferred() {        scope.launch {            val async = async {                println("Deferred  Thread 开始执行")                delay(1000)                println("Deferred  Thread 执行完毕")            }            val result = async.await()            println("Deferred async.await()")        }    }    fun testJob() {        scope.launch {            val job = launch(start = CoroutineStart.LAZY) {                delay(1000)            }            delay(1000)            job.log()            job.start()            job.log()            job.cancel()            job.log()            job.invokeOnCompletion { // 如果job被取消，这个也会回调                job.log("invokeOnCompletion:")            }            job.join()            println("Job  Thread 任务执行完毕")        }    }    private fun Job.log(s: String = EMPTY) {        println(s.plus("Thread：：：${Thread.currentThread().name}：：： isActive：：：$isActive：：：   isCancelled：：：$isCancelled：：：   isCompleted：：：$isCompleted"))    }    private suspend fun getUserInfo(): String {        withContext(Dispatchers.IO) {            delay(2000)        }        return "getUserInfo"    }    private suspend fun getFriendList(userInfo: String): String {        withContext(Dispatchers.IO) {            delay(1000)        }        return "getFriendList::::$userInfo"    }    private suspend fun getFeedList(friendList: String): String {        withContext(Dispatchers.IO) {            delay(4000)        }        return "getFeedList::::$friendList"    }    /**     * 挂起：只是将程序执行流程转移到其他线程，然后回到当前线程     */    fun testSuspendFun() {        scope.launch(Dispatchers.Main) {            val time = measureTimeMillis {                val userInfo = getUserInfo()                val friendList = getFriendList(userInfo)                val feedList = getFeedList(friendList)                println("测试feedList: $feedList")            }            println("运行 的总时间 $time")        }    }}
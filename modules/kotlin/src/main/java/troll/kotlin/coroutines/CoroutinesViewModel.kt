package troll.kotlin.coroutinesimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.Deferredimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.Jobimport kotlinx.coroutines.asyncimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport troll.btc.log.TLogimport troll.eth.base.viewbinding.BaseViewModelclass CoroutinesViewModel : BaseViewModel() {    fun coroutines1() {        GlobalScope.launch(Dispatchers.IO) {            println("Coroutine started:${Thread.currentThread().name}")            delay(1000L)            TLog.i("Coroutine started:${Thread.currentThread().name} ")        }        println("After launch:${Thread.currentThread().name}")        Thread.sleep(2000L)    }    fun coroutinesAsync() {        viewModelScope.launch {            val deferred: Deferred<String> = async {                return@async "使用async获取协程结果"            }            val result = deferred.await()            println(result)        }    }}fun Job.log() {    logX(""" isActive = $isActive isCancelled = $isCancelled isCompleted = $isCompleted """.trimIndent())}fun logX(any: Any?) {    println("""================================$any Thread:${Thread.currentThread().name}================================""".trimIndent())}
package troll.kotlin.softinputimport android.animation.AnimatorSetimport android.animation.ObjectAnimatorimport android.animation.ValueAnimatorimport android.view.LayoutInflaterimport android.view.Viewimport android.view.animation.AnimationUtilsimport androidx.core.animation.addListenerimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.Rimport troll.kotlin.databinding.ActivitySoftInputBinding/** * author : TangPeng * date : 3/28/22 17:01 * description : */class SoftInputActivity : BaseActivity<ActivitySoftInputBinding>() {    override fun getBinding(inflater: LayoutInflater): ActivitySoftInputBinding =        ActivitySoftInputBinding.inflate(inflater)    private val animation by    lazy { AnimationUtils.loadAnimation(this, R.anim.anim_red_packet_result) }    override fun flowData() {    }    override fun flowView() {        tvAnimator(bd.tv)    }    private fun tvAnimator(view: View) {        val tv = AnimatorSet()        val scaleX = ObjectAnimator.ofFloat(view, "scaleX", 1f, 1.1f)        scaleX.repeatCount = -1        scaleX.duration = 350        scaleX.repeatMode = ValueAnimator.REVERSE        val scaleY = ObjectAnimator.ofFloat(view, "scaleY", 1f, 1.1f)        scaleY.repeatCount = -1        scaleY.duration = 350        scaleY.repeatMode = ValueAnimator.REVERSE        scaleY.addListener(            onStart = { reverseIv() },            onRepeat = { reverseIv() })        tv.playTogether(scaleX, scaleY)        tv.start()    }    @Volatile    var up = true    private fun reverseIv() {        up = if (up) {            ivAnimator(-15f, bd.ivFinger)            bd.ivCircle.visibility = View.GONE            false        } else {            bd.ivCircle.visibility = View.VISIBLE            ivAnimator(15f, bd.ivFinger)            true        }    }    private fun ivAnimator(value: Float, view: View) {        val set = AnimatorSet()        val translationY =            ObjectAnimator.ofFloat(view, "translationY", value)        translationY.duration = 350        val translationX = ObjectAnimator.ofFloat(view, "translationX", value)        translationX.duration = 350        set.playTogether(translationY, translationX)        set.start()    }}
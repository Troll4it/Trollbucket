package troll.kotlin.softinputimport android.animation.AnimatorSetimport android.animation.ObjectAnimatorimport android.animation.ValueAnimatorimport android.view.LayoutInflaterimport android.view.animation.AnimationUtilsimport androidx.core.animation.addListenerimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.Rimport troll.kotlin.databinding.ActivitySoftInputBinding/** * author : TangPeng * date : 3/28/22 17:01 * description : */class SoftInputActivity : BaseActivity<ActivitySoftInputBinding>() {    override fun getBinding(inflater: LayoutInflater): ActivitySoftInputBinding =        ActivitySoftInputBinding.inflate(inflater)    private val animation by    lazy { AnimationUtils.loadAnimation(this, R.anim.anim_red_packet_result) }    override fun flowData() {    }    override fun flowView() {        tvAnimator()//        bd.tv.startAnimation(animation)//        val set = AnimatorSet()//        val translationY =//            ObjectAnimator.ofFloat(bd.ivFinger, "translationY", -20f)//        translationY.duration = 350//        translationY.repeatCount = -1//        translationY.repeatMode = ValueAnimator.REVERSE//        val translationX = ObjectAnimator.ofFloat(bd.ivFinger, "translationX", -20f)//        translationX.repeatCount = -1//        translationX.duration = 350//        translationX.repeatMode = ValueAnimator.REVERSE//        set.playTogether(translationY, translationX)//        set.start()    }    private fun tvAnimator() {        val tv = AnimatorSet()        val scaleX = ObjectAnimator.ofFloat(bd.tv, "scaleX", 1f, 1.1f)        scaleX.repeatCount = -1        scaleX.duration = 350        scaleX.repeatMode = ValueAnimator.REVERSE        val scaleY = ObjectAnimator.ofFloat(bd.tv, "scaleY", 1f, 1.1f)        scaleY.repeatCount = -1        scaleY.duration = 350        scaleY.repeatMode = ValueAnimator.REVERSE        scaleY.addListener(            onStart = {                reverseIv()            },            onEnd = {            },            onRepeat = {                reverseIv()            })        tv.playTogether(scaleX, scaleY)        tv.start()    }    @Volatile    var up = true    private fun reverseIv() {        up = if (up) {            ivAnimator(-20f)            false        } else {            ivAnimator(20f)            true        }    }    private fun ivAnimator(value: Float) {        val set = AnimatorSet()        val translationY =            ObjectAnimator.ofFloat(bd.ivFinger, "translationY", value)        translationY.duration = 350        val translationX = ObjectAnimator.ofFloat(bd.ivFinger, "translationX", value)        translationX.duration = 350        translationX.addListener(onEnd = {            println("动画结束 $value")        })        set.playTogether(translationY, translationX)        set.start()    }}
package troll.kotlin.animationimport android.animation.Animatorimport android.animation.ObjectAnimatorimport android.graphics.Typefaceimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewPropertyAnimatorimport android.view.animation.AccelerateDecelerateInterpolatorimport android.view.animation.DecelerateInterpolatorimport androidx.interpolator.view.animation.FastOutSlowInInterpolatorimport androidx.interpolator.view.animation.LinearOutSlowInInterpolatorimport com.alibaba.android.arouter.facade.annotation.Autowiredimport troll.btc.constants.EMPTYimport troll.btc.extensions.onClickimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.animation.ticker.TickerViewimport troll.kotlin.databinding.ActivityAnimationDetailBinding/** * author : TangPeng * date : 4/24/22 15:35 * description : */class AnimationDetailActivity : BaseActivity<ActivityAnimationDetailBinding>() {    @Autowired    @JvmField    var type: String = EMPTY    var translationState: Int = 0    var rotationState: Int = 0    var scaleState: Int = 0    var alphaState: Int = 0    override fun getBinding(inflater: LayoutInflater): ActivityAnimationDetailBinding =        ActivityAnimationDetailBinding.inflate(inflater)    override fun flowData() {    }    override fun flowView() {        bd.ticker.animationInterpolator = AccelerateDecelerateInterpolator()        start(bd.ticker)        bd.ticker2.animationInterpolator = DecelerateInterpolator(0.9f)        start(bd.ticker2)        bd.ticker3.animationInterpolator = LinearOutSlowInInterpolator()        start(bd.ticker3)        bd.ticker4.animationInterpolator = FastOutSlowInInterpolator()        start(bd.ticker4)        bd.animationButtonStart.onClick {//            translation(bd.animationView)//            multiAnimate(bd.animationView)//            bd.animationObject.progress = 69f            bd.ticker.setText("0.15")            bd.ticker3.setText("0.15")            bd.ticker4.setText("0.15")            bd.ticker2.setText("0.15")        }        bd.animationButtonStop.onClick {            bd.ticker.setText("0.30")            bd.ticker2.setText("0.30")            bd.ticker3.setText("0.30")            bd.ticker4.setText("0.30")//            bd.animationObject.progress = 150f        }    }    fun start(view: TickerView) {        view.typeface = Typeface.createFromAsset(assets, "akrobat_bold.ttf")        view.textSize = 150f        view.animationDuration = 2000        view.setText("0.15")    }    /**     * 位移动画     */    private fun translation(view: View) {        when (translationState) {            0 -> view.animate().translationX(150f)            1 -> view.animate().translationX(0f)            2 -> view.animate().translationX(-150f)            3 -> view.animate().translationX(0f)            4 -> view.animate().translationY(150f)            5 -> view.animate().translationY(0f)            6 -> view.animate().translationY(-150f)            7 -> view.animate().translationY(0f)        }        translationState = resetState(++translationState, 8)    }    /**     * 旋转动画     */    private fun rotation(view: View) {        when (rotationState) {            0 -> view.animate().rotation(150f)            1 -> view.animate().rotation(0f)            2 -> view.animate().rotationX(-150f)            3 -> view.animate().rotationX(150f)            4 -> view.animate().rotationY(150f)            5 -> view.animate().rotationY(-150f)        }        rotationState = resetState(++rotationState, 6)    }    /**     * 缩放动画     */    private fun scale(view: View) {        when (scaleState) {            0 -> view.animate().scaleX(1.5f)            1 -> view.animate().scaleX(1f)            2 -> view.animate().scaleY(1.5f)            3 -> view.animate().scaleY(1f)        }        scaleState = resetState(++scaleState, 4)    }    /**     * 透明度     */    private fun alpha(view: View) {        when (alphaState) {            0 -> view.animate().alpha(0f)            1 -> view.animate().alpha(1f)        }        alphaState = resetState(++alphaState, 2)    }    private fun multiAnimate(view: View) {        view.animate().translationX(300f)            .rotation(0f)            .scaleX(0f)            .scaleY(0f)            .alpha(0f)            .duration = 3000    }    /**     * 重置数据     */    private fun resetState(state: Int, limit: Int): Int {        return if (state == limit) {            0        } else {            state        }    }    private fun setViewPropertyAnimator(viewPropertyAnimator: ViewPropertyAnimator) {        viewPropertyAnimator.setListener(object : Animator.AnimatorListener {            override fun onAnimationStart(p0: Animator?) {            }            override fun onAnimationEnd(p0: Animator?) {            }            override fun onAnimationCancel(p0: Animator?) {            }            override fun onAnimationRepeat(p0: Animator?) {            }        })    }    fun setObjectAnimator(animator: ObjectAnimator) {        animator.addListener(object : Animator.AnimatorListener {            override fun onAnimationStart(p0: Animator?) {            }            override fun onAnimationEnd(p0: Animator?) {            }            override fun onAnimationCancel(p0: Animator?) {            }            override fun onAnimationRepeat(p0: Animator?) {            }        })    }}
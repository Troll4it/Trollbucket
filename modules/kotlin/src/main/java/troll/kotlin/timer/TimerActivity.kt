package troll.kotlin.timerimport android.content.pm.PackageManagerimport android.util.Base64import android.view.LayoutInflaterimport com.blankj.utilcode.util.AppUtilsimport kotlinx.coroutines.MainScopeimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport troll.btc.extensions.onClickimport troll.btc.extensions.throttleFirstimport troll.btc.util.time.timer.FlowTimerimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.databinding.ActivityTimerBindingimport java.security.MessageDigest/** * author : TangPeng * date : 11/22/22 17:10 * description : */class TimerActivity : BaseActivity<ActivityTimerBinding>() {    override fun getBinding(inflater: LayoutInflater): ActivityTimerBinding =        ActivityTimerBinding.inflate(inflater)    override fun flowData() {    }    override fun flowView() {        val flowTimer = FlowTimer(10, MainScope(), onStart = {            println("倒计时 onStart ")        }, onTick = {            println("倒计时 onTick $it ::::::${getSignature()}")        }, onStop = {            println("倒计时 onStop ")        }, onFinish = {            println("倒计时 onFinish ")        }, onCancel = {            println("倒计时 onCancel ")        })        bd.timerCancel.onClick().throttleFirst().onEach {            println("当前时间 取消")            flowTimer.cancel()        }.launchIn(MainScope())        bd.timerStart.onClick {            flowTimer.start()        }        bd.timerStop.onClick {            flowTimer.stop()        }        bd.timerRestart.onClick {            flowTimer.reStart()        }        bd.timerCancel.onClick {            flowTimer.cancel()        }    }    fun getSignature(): String {        val packageInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES)        val appSignatures = AppUtils.getAppSignatures()        val toByteArray = appSignatures?.get(0)?.toByteArray()        val instance = MessageDigest.getInstance("SHA")        val digest = instance.digest(toByteArray)        return Base64.encodeToString(digest, Base64.NO_WRAP)    }}
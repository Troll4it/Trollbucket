package troll.kotlin.notificationimport android.app.Notificationimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.content.Contextimport android.graphics.BitmapFactoryimport android.os.Buildimport android.view.LayoutInflaterimport android.widget.RemoteViewsimport androidx.core.app.NotificationCompatimport androidx.core.app.NotificationManagerCompatimport troll.btc.extensions.onClickimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.Rimport troll.kotlin.databinding.ActivityNotificationBinding/** * author : TangPeng * date : 8/9/22 15:27 * description : */class NotificationActivity : BaseActivity<ActivityNotificationBinding>() {    var nm: NotificationManager? = null    override fun getBinding(inflater: LayoutInflater): ActivityNotificationBinding =        ActivityNotificationBinding.inflate(inflater)    override fun flowData() {        bd.notificationShow.onClick {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                val notificationChannel =                    NotificationChannel("1", "通知", NotificationManager.IMPORTANCE_HIGH)                notificationChannel.setSound(null, null)                notificationChannel.description = "通知栏"                notificationChannel.enableLights(false)                notificationChannel.enableVibration(false)                nm?.createNotificationChannel(notificationChannel)                val builder = Notification.Builder(this, "1")                builder.setSmallIcon(R.drawable.ic_shortcut_cash); //小图标                builder.setLargeIcon(                    BitmapFactory.decodeResource(                        resources,                        R.drawable.ic_shortcut_red_packet                    )                );                builder.setContentTitle("我是大标题通知");                builder.setSound(android.provider.Settings.System.DEFAULT_NOTIFICATION_URI)                builder.setContentText("我是通知内容");                builder.setSubText("用于提交的标题");                builder.setPriority(Notification.PRIORITY_MAX)                builder.setTicker("你的宝贝发过来的信息通知");                builder.setChannelId(notificationChannel.id)                builder.setWhen(System.currentTimeMillis());//时间                nm?.notify("1", 1, builder.build());            }        }        bd.notificationBig.onClick {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                val remoteViews =                    RemoteViews(applicationContext.packageName, R.layout.notification_custom_big)                val customNotification = NotificationCompat.Builder(this, "2")                    .setSmallIcon(R.drawable.ic_shortcut_cash)                    .setStyle(NotificationCompat.DecoratedCustomViewStyle())                    .setCustomBigContentView(remoteViews)                    .setOngoing(true)                    .setAutoCancel(false)                    .setVibrate(null)                    .setSound(null)                    .setShowWhen(false)                with(NotificationManagerCompat.from(this)) {                    notify(2, customNotification.build())                }            }        }    }    override fun flowView() {        nm = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager    }}
package troll.kotlin.flowimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.channels.BufferOverflowimport kotlinx.coroutines.flow.*import troll.btc.constants.EMPTYimport troll.eth.base.viewbinding.BaseViewModel/** * author : TangPeng * date : 5/12/22 08:54 * description : */class FlowViewModel : BaseViewModel() {    var test: String = EMPTY    fun timeFlow(): Flow<String> {        val flow = flow {            var time = 0            while (true) {                kotlinx.coroutines.delay(100)                if (time < 10) {                    emit(time++)                }            }        }        val map = flow.sample(1000).flowOn(Dispatchers.IO).map {            test = test.plus(":").plus(it.toString())            test        }        return map    }    // StateFlow    val stateFlow = MutableStateFlow("")    fun stateFlow() {        stateFlow.value = "StateFlow"    }    // SharedFlow    val sharedFlow = MutableSharedFlow<String>(5, 2, BufferOverflow.DROP_OLDEST)    fun sharedFlow() {        for (i in 11..20) {            sharedFlow.tryEmit("SharedFlow".plus(i))        }    }}
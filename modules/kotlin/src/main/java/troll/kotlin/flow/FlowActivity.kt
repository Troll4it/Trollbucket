package troll.kotlin.flowimport android.view.LayoutInflaterimport androidx.activity.viewModelsimport androidx.lifecycle.lifecycleScopeimport kotlinx.coroutines.*import kotlinx.coroutines.flow.*import troll.btc.extensions.onClickimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.databinding.ActivityFlowBindingclass FlowActivity : BaseActivity<ActivityFlowBinding>() {    private val vm: FlowViewModel by viewModels()    // select 操作符    private val selectVm: SelectViewModel by viewModels()    override fun getBinding(inflater: LayoutInflater): ActivityFlowBinding =        ActivityFlowBinding.inflate(inflater)    override fun flowData() {        lifecycleScope.launch {            vm.timeFlow().collect { time ->                bd.busTv.text = time            }        }        lifecycleScope.launch {            vm.stateFlow.collect {                bd.busTv.text = it            }        }        lifecycleScope.launch {            vm.sharedFlow.collect {                bd.busTv.text = it            }        }    }    override fun flowView() {        bd.kotlinFlowFlowSharedflow.onClick {            vm.sharedFlow()        }        val countDown: Job? = null        bd.kotlinFlowFlow.onClick {            countDown(20, lifecycleScope, onTick = {                println("倒计时 $it")            }, onStart = {                println("倒计时 onStart")            }, onCompletion = {                println("倒计时 onCompletion")            }, onCancel = {                println("倒计时 onCancel")            })        }        bd.busTv.onClick {            countDown?.cancel()        }    }}fun countDown(    total: Int, scope: CoroutineScope,    onTick: ((Int) -> Unit)? = null,    onStart: (() -> Unit)? = null,    onCompletion: (() -> Unit)? = null,    onCancel: (() -> Unit)? = null,): Job {    return flow {        for (i in total downTo 0) {            emit(i)            delay(1000)        }    }.flowOn(Dispatchers.Main)        .catch {            println("倒计时 异常")        }        .onStart { onStart?.invoke() }        .onCompletion { throwable ->            if (throwable == CancellationException()) {                onCancel?.invoke()            } else {                onCompletion?.invoke()            }        }.onEach { onTick?.invoke(it) }.launchIn(scope)}
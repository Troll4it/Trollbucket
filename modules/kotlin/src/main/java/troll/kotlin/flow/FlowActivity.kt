package troll.kotlin.flowimport android.view.LayoutInflaterimport androidx.activity.viewModelsimport androidx.lifecycle.lifecycleScopeimport com.troll.bus.Busimport troll.btc.extensions.countDownimport troll.btc.extensions.onClickimport troll.btc.extensions.startAcimport troll.eth.base.viewbinding.BaseActivityimport troll.kotlin.TransparentActivityimport troll.kotlin.databinding.ActivityFlowBindingclass FlowActivity : BaseActivity<ActivityFlowBinding>() {    private val vm: FlowViewModel by viewModels()    override fun getBinding(inflater: LayoutInflater): ActivityFlowBinding =        ActivityFlowBinding.inflate(inflater)    override fun flowData() {        Bus.get().with(this).onValue<String>(1) {            println("数据接收$it")        }        lifecycleScope.launchWhenResumed {            println("lifecycleScope 启动数据`")            vm.stateFlow.collect {                bd.busTv.text = it            }        }    }    override fun flowView() {        bd.busButtonSend.onClick {//            bus()//            monitorFlow()//            cancelFlow()//            distinctUntilChanged()            countDown(20, lifecycleScope,                onTick = {//                    vm.testStateFlow("测试StateFlow $it")                    vm.testLive("测试LiveData $it")                },                onFinish = {                })        }        bd.busButtonDismiss.onClick {            startAc(TransparentActivity::class.java)        }    }    private fun bus() {        Bus.get().send(1, "测试发送")    }    private fun monitorFlow() {        vm.monitorFlow()    }    private fun cancelFlow() {        vm.cancelFlow()    }    private fun distinctUntilChanged() {        vm.distinctUntilChanged()    }}fun main() {//    println("0.02331".decimalFormatDigits2())}
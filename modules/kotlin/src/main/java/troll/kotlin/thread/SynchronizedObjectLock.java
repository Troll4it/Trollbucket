package troll.kotlin.thread;/** * author : TangPeng * date : 12/17/22 16:47 * description : */public class SynchronizedObjectLock implements Runnable {    static SynchronizedObjectLock instance = new SynchronizedObjectLock();    // 创建    Object ob1 = new Object();    Object ob2 = new Object();    @Override    public void run() {        method();//        synchronized (this) {//            System.out.println("线程" + Thread.currentThread().getName());//            try {//                Thread.sleep(3000);//            } catch (InterruptedException e) {//                e.printStackTrace();//            }//            System.out.println("线程" + Thread.currentThread().getName() + "  结束");//        }////        synchronized (ob1) {//            System.out.println("block1锁,我是线程" + Thread.currentThread().getName());//            try {//                Thread.sleep(3000);//            } catch (InterruptedException e) {//                e.printStackTrace();//            }//            System.out.println("block1锁," + Thread.currentThread().getName() + "结束");////        }////        synchronized (ob2) {//            System.out.println("block2锁,我是线程" + Thread.currentThread().getName());//            try {//                Thread.sleep(3000);//            } catch (InterruptedException e) {//                e.printStackTrace();//            }//            System.out.println("block2锁," + Thread.currentThread().getName() + "结束");//        }    }    private synchronized void method() {        System.out.println("方法锁" + Thread.currentThread().getName());        try {            Thread.sleep(3000);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(Thread.currentThread().getName() + "结束");    }    public static void main(String[] args) {        Thread thread1 = new Thread(instance);        Thread thread2 = new Thread(instance);        thread1.start();        thread2.start();    }}
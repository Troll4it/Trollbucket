package troll.kotlin.serviceimport android.annotation.SuppressLintimport android.app.Notificationimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.app.Serviceimport android.content.Contextimport android.content.Intentimport android.graphics.BitmapFactoryimport android.os.Buildimport android.os.Handlerimport android.os.IBinderimport android.os.Messageimport com.blankj.utilcode.util.AppUtilsimport troll.kotlin.R/** * author : TangPeng * date : 9/14/22 14:09 * description : */class WidgetService : Service() {    private var handler: Handler? = null    override fun onBind(intent: Intent?): IBinder? {        println("后台服务 onBind")        throw UnsupportedOperationException("Not yet implemented")    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        createNotification()        println("后台服务 onStartCommand$startId")        object : Thread() {            override fun run() {                super.run()                try {                    sleep(5000)                } catch (e: InterruptedException) {                    e.printStackTrace()                }                handler!!.sendEmptyMessage(startId)            }        }.start()        return super.onStartCommand(intent, flags, startId)    }    private fun createNotification() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val nm = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager            val notificationChannel =                NotificationChannel("1", "通知", NotificationManager.IMPORTANCE_HIGH)            notificationChannel.setSound(null, null)            notificationChannel.description = "description"            notificationChannel.enableLights(false)            notificationChannel.enableVibration(false)            nm.createNotificationChannel(notificationChannel)            val builder = Notification.Builder(this, "1")            builder.setSmallIcon(R.drawable.ic_shortcut_cash); //小图标            builder.setContentText("setContentText");            builder.setChannelId(notificationChannel.id)            builder.setWhen(System.currentTimeMillis());//时间            startForeground(1, builder.build())        }    }    override fun onCreate() {        super.onCreate()        println("后台服务 onCreate" + AppUtils.isAppForeground())        handler = MyHandler()    }    @SuppressLint("HandlerLeak")    private inner class MyHandler : Handler() {        override fun handleMessage(msg: Message) {            super.handleMessage(msg)            println("后台服务 HandlerLeak:::" + AppUtils.isAppForeground())//            stopSelf(1)        }    }    override fun onDestroy() {        super.onDestroy()        println("后台服务  onDestroy "+ AppUtils.isAppForeground())//        stopForeground(true)    }}
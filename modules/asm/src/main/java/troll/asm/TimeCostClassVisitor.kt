package troll.asmimport org.objectweb.asm.ClassVisitorimport org.objectweb.asm.MethodVisitorimport org.objectweb.asm.Opcodesimport org.objectweb.asm.commons.AdviceAdapter/** * author : TangPeng * date : 6/6/22 14:04 * description : */class TimeCostClassVisitor(nextVisitor: ClassVisitor) : ClassVisitor(Opcodes.ASM5, nextVisitor) {    override fun visitMethod(        access: Int,        name: String?,        descriptor: String?,        signature: String?,        exceptions: Array<out String>?    ): MethodVisitor {        val methodVisitor = super.visitMethod(access, name, descriptor, signature, exceptions)        val newVisitor =            object : AdviceAdapter(Opcodes.ASM5, methodVisitor, access, name, descriptor) {                override fun onMethodEnter() {                    if (isNeedVisitMethod(name)) {                        mv.visitLdcInsn(name)                        mv.visitMethodInsn(                            INVOKESTATIC,                            "troll/asm/TimeCache",                            "putStartTime",                            "(Ljava/lang/String;)V",                            false                        )                    }                    super.onMethodEnter()                }                override fun onMethodExit(opcode: Int) {                    if (isNeedVisitMethod(name)) {                        mv.visitLdcInsn(name);                        mv.visitMethodInsn(                            INVOKESTATIC, "troll/asm/TimeCache", "putEndTime",                            "(Ljava/lang/String;)V", false                        );                    }                    super.onMethodExit(opcode)                }            }        return newVisitor    }    private fun isNeedVisitMethod(name: String?): Boolean {        return name != "putStartTime"                && name != "putEndTime"                && name != "<clinit>"                && name != "printlnTime"                && name != "<init>"    }}
package com.troll.algorithm.二叉树;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Queue;/** * author : TangPeng * date : 11/9/22 21:41 * description : */public class 层序遍历 {    public List<List<Integer>> resList = new ArrayList<List<Integer>>();    public List<List<Integer>> leveOrder(TreeNode root) {        checkFun01(root, 0);        return resList;    }    // DFS    public void checkFun01(TreeNode node, Integer deep) {        if (node == null) return;        deep++;        if (resList.size() < deep) {            List<Integer> item = new ArrayList<>();            resList.add(item);        }        resList.get(deep - 1).add(node.val);        checkFun01(node.left, deep);        checkFun01(node.right, deep);    }    // BFS    public void checkFun02(TreeNode node) {        if (node == null) return;        Queue<TreeNode> queue = new LinkedList<>();        queue.offer(node);        while (!queue.isEmpty()) {            List<Integer> itemList = new ArrayList<>();            int size = queue.size();            while (size > 0) {                TreeNode tempNode = queue.poll();                if (tempNode != null) {                    itemList.add(tempNode.val);                    if (tempNode.left != null) queue.offer(tempNode.left);                    if (tempNode.right != null) queue.offer(tempNode.right);                }                size--;            }            resList.add(itemList);        }    }}
package com.troll.algorithm.leetCode.n77;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;/** * author : TangPeng * date : 11/20/22 22:44 * description : */public class 组合 {    public static void main(String[] args) {        combine(4, 2);    }    static List<List<Integer>> result = new ArrayList<>();    static LinkedList<Integer> path = new LinkedList<>();    public static List<List<Integer>> combine(int n, int k) {        combineHelper(n, k, 1);        return result;    }    /**     * @param n     * @param k startIndex  用来记录本层递归的中，集合从哪里开始遍历（集合就是[1,...,n] ）     */    private static void combineHelper(int n, int k, int startIndex) {        if (path.size() == k) {            result.add(new ArrayList<>(path));            return;        }        for (int i = startIndex; i <= n - (k - path.size()) + 1; i++) {            System.out.println("i = " + i +"    n - (k - path.size()) + 1 = " + (n - (k - path.size()) + 1) +", startIndex = " + startIndex + ", path = " + path.toString());            path.add(i);            combineHelper(n, k, i + 1);            path.removeLast();        }    }}
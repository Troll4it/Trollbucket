package com.troll.algorithm.滑动窗口法.n209;/** * author : TangPeng * date : 4/12/22 08:56 * description : * 给定一个含有 n 个正整数的数组和一个正整数 target 。 * <p> * 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 */public class 长度最小的子数组 {    /**     * 采用 滑动窗口法来解决 这种连续子数组     */    public static void main(String[] args) {        System.out.println("args = " + minSubArrayLen(17, new int[]{1, 2, 1, 1, 3, 7, 8, 5, 1}));    }    public static int minSubArrayLen(int target, int[] nums) {        int left = 0;        int sum = 0;        int result = Integer.MAX_VALUE;        for (int right = 0; right < nums.length; right++) {            sum += nums[right];            while (sum >= target) { // 表示当前的窗口的数字大于目标值,同时这个可以控制left指针向后滑动                result = Math.min(result, right - left + 1);                System.out.println("left = " + nums[left] + "::::right " + nums[right]);                sum -= nums[left++];            }        }        return result == Integer.MAX_VALUE ? 0 : result;    }}
package com.troll.algorithm.leetCode.双指针法.n977;import java.util.Arrays;/** * author : TangPeng * date : 4/26/22 08:59 * description : * 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序 * <p> * 解题思路：这里面是有负数的，平方后，排序不是在前面就是在后面 */public class 有序数组的平方 {    public static void main(String[] args) {        int[] s = new int[]{-4, -1, 0, 3, 10};        int[] ints = sortedSquares(s);        System.out.println("args = " + Arrays.toString(ints));    }    public static int[] sortedSquares(int[] nums) {        if (nums == null) return new int[0];        int start = 0, end = nums.length - 1;        int[] result = new int[nums.length];        int index = nums.length - 1;  // 这里不能从0开始，必须从nums.length - 1开始，原因：存在负数，平方后全是正数，需要与最后的数做比较        while (end >= start) {            if (nums[start] * nums[start] > nums[end] * nums[end]) {                result[index--] = nums[start] * nums[start];                ++start;            } else {                result[index--] = nums[end] * nums[end];                --end;            }        }        return result;    }}
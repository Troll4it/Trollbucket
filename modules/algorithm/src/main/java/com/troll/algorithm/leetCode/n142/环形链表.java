package com.troll.algorithm.leetCode.n142;import com.troll.algorithm.链表.ListNode;/** * author : TangPeng * date : 11/1/22 00:08 * description : */public class 环形链表 {    public ListNode detectCycle(ListNode head) {        ListNode slow = head;        ListNode fast = head;        while (fast != null && fast.next != null) {            slow = slow.next;            fast = fast.next.next;            if (slow == fast) { // 有环                ListNode index1 = fast;                ListNode index2 = head;                // 两个指针，从头节点和相遇结点，各走一步，直到连个节点相等，相遇点为环入口 // 这个是2(x+y) = x+y+n(y+z) 当n=1成立的点，一个点从相遇点开始、一个点从头开始                while (index1 != index2) {                    index1 = index1.next;                    index2 = index2.next;                }                return index1;            }        }        return null;    }}
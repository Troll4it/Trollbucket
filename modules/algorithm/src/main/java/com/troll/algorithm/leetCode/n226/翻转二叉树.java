package com.troll.algorithm.leetCode.n226;import com.troll.algorithm.二叉树.TreeNode;import java.util.ArrayDeque;/** * author : TangPeng * date : 11/9/22 23:36 * description : */public class 翻转二叉树 {    // 深度优先    public TreeNode invertTree(TreeNode root) {        if (root == null) return null;        invertTree(root.left);        invertTree(root.right);        swapChild(root);        return root;    }    private void swapChild(TreeNode root) {        TreeNode temp = root.left;        root.left = root.right;        root.right = temp;    }    // 广度优先    public TreeNode invertTree1(TreeNode root) {        if (root == null) return null;        ArrayDeque<TreeNode> deque = new ArrayDeque<>();        deque.offer(root);        while (!deque.isEmpty()) {            int size = deque.size();            while (size-- > 0) {                TreeNode node = deque.poll();                if (node != null) {                    swap(node);                    if (node.left != null) {                        deque.offer(node.left);                    }                    if (node.right != null) {                        deque.offer(node.right);                    }                }            }        }        return root;    }    private void swap(TreeNode root) {        TreeNode temp = root.right;        root.right = root.left;        root.left = temp;    }}
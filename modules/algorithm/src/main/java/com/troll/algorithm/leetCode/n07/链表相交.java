package com.troll.algorithm.leetCode.n07;import com.troll.algorithm.链表.ListNode;/** * author : TangPeng * date : 10/31/22 22:58 * description : */public class 链表相交 {    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {        ListNode curA = headA;        ListNode curB = headB;        int lenA = 0, lenB = 0;        while (curA != null) { // 求链表A的长度            lenA++;            curA = curA.next;        }        while (curB != null) {            lenB++;            curB = curB.next;        }        curA = headA;        curB = headB;        // 让curA为最长链表的头，leaA为其长度 (此时保证A链表为最长的链表)        if (lenB > lenA) {            int tempLen = lenA;            lenA = lenB;            lenB = tempLen;            ListNode tempNode = curA;            curA = curB;            curB = tempNode;        }        // 求长度差        int gap = lenA - lenB;        // A链表移动长度差        while (gap-- > 0) {            curA = curA.next;        }        while (curA != null) {            if (curA == curB) {                return curA;            }            curA = curA.next;            curB = curB.next;        }        return null;    }}
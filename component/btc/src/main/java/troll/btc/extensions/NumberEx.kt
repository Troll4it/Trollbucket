package troll.btc.extensionsimport java.math.RoundingModeimport java.text.DecimalFormatimport java.text.NumberFormat/** * author : TangPeng * date : 5/15/22 10:22 * description : */fun Double.format(    fractionDigits: Int,    mode: RoundingMode = RoundingMode.HALF_UP,    groupUsed: Boolean = false): String {    return NumberFormat.getInstance().apply {        isGroupingUsed = groupUsed        minimumFractionDigits = fractionDigits        maximumFractionDigits = fractionDigits        roundingMode = mode    }.run {        format(this@format)    }}fun Float.format(    fractionDigits: Int,    mode: RoundingMode = RoundingMode.HALF_UP,    groupUsed: Boolean = false): String {    return NumberFormat.getInstance().apply {        isGroupingUsed = groupUsed        minimumFractionDigits = fractionDigits        maximumFractionDigits = fractionDigits        roundingMode = mode    }.run {        format(this@format)    }}fun String?.toLong(): Long {    return try {        if (isNullOrEmpty()) {            0L        } else {            java.lang.Long.parseLong(this)        }    } catch (e: Exception) {        0L    }}fun String?.toDouble(): Double {    return try {        if (isNullOrEmpty()) {            0.0        } else {            java.lang.Double.parseDouble(this)        }    } catch (e: Exception) {        0.0    }}fun String?.toFloat(): Float {    return try {        if (isNullOrEmpty()) {            0.0f        } else {            java.lang.Float.parseFloat(this)        }    } catch (e: Exception) {        0.0f    }}fun String?.toInt(): Int {    return try {        if (isNullOrEmpty()) {            0        } else {            Integer.parseInt(this)        }    } catch (e: Exception) {        0    }}fun Int?.orZero(): Int {    return this ?: 0}fun Float?.orZero(): Float {    return this ?: 0f}fun Long?.orZero(): Long {    return this ?: 0}
package troll.btc.logimport android.util.Logimport kotlin.reflect.KProperty/** * author : TangPeng * date : 3/11/22 15:06 * description : */fun String.d(tag: String = TLog.TAG) {    if (TLog.debug) Log.d(tag, this)}fun String.i(tag: String = TLog.TAG) {    if (TLog.debug) Log.i(tag, this)}fun String.e(tag: String = TLog.TAG) {    if (TLog.debug) Log.e(tag, this)}fun <T> Collection<T>.i(mapper: (T) -> String, tag: String = TLog.TAG) =    StringBuilder("\n[").also { sb ->        //遍历集合元素将元素转换成感兴趣的字串，并独占一行        this.forEach { e -> sb.append("\n\t${mapper(e)},") }        sb.append("\n]")    }.toString().i(tag)fun <T> Collection<T>.e(mapper: (T) -> String, tag: String = TLog.TAG) =    StringBuilder("\n[").also { sb ->        //遍历集合元素将元素转换成感兴趣的字串，并独占一行        this.forEach { e -> sb.append("\n\t${mapper(e)},") }        sb.append("\n]")    }.toString().e(tag)fun <T> Collection<T>.d(mapper: (T) -> String, tag: String = TLog.TAG) =    StringBuilder("\n[").also { sb ->        //遍历集合元素将元素转换成感兴趣的字串，并独占一行        this.forEach { e -> sb.append("\n\t${mapper(e)},") }        sb.append("\n]")    }.toString().d(tag)fun <K, V> Map<K, V?>.i(mapper: (V?) -> String, tag: String = TLog.TAG): Unit =    StringBuilder("\n{").also { sb ->        this.iterator().forEach { entry ->            sb.append("\n\t[${entry.key}] = ${mapper(entry.value)}")        }        sb.append("\n}")    }.toString().i(tag)fun <K, V> Map<K, V?>.e(mapper: (V?) -> String, tag: String = TLog.TAG): Unit =    StringBuilder("\n{").also { sb ->        this.iterator().forEach { entry ->            sb.append("\n\t[${entry.key}] = ${mapper(entry.value)}")        }        sb.append("\n}")    }.toString().e(tag)fun <K, V> Map<K, V?>.d(mapper: (V?) -> String, tag: String = TLog.TAG): Unit =    StringBuilder("\n{").also { sb ->        this.iterator().forEach { entry ->            sb.append("\n\t[${entry.key}] = ${mapper(entry.value)}")        }        sb.append("\n}")    }.toString().d(tag)public infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)fun Any.ofMap() =    // 过滤掉除data class以外的其他类    this::class.takeIf { it.isData }        // 遍历类的所有成员 过滤掉成员方法 只考虑成员属性        ?.members?.filterIsInstance<KProperty<Any>>()        // 将成员属性名和值存储在Pair中        ?.map { it.name to it.call(this) }        // 将Pair转换成map        ?.toMap()object TLog {    const val TAG = "T_Log"    var debug = true    fun d(tag: String = TAG, message: String) {        if (debug) Log.d(tag, message)    }    fun i(tag: String = TAG, message: String) {        if (debug) Log.i(tag, message)    }    fun e(tag: String = TAG, message: String) {        if (debug) Log.e(tag, message)    }}
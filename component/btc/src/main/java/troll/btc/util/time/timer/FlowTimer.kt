package troll.btc.util.time.timerimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.Jobimport kotlinx.coroutines.flow.*/** * author : TangPeng * date : 11/22/22 14:35 * description : Flow版本的倒计时 */class FlowTimer(    private var total: Int,    scope: CoroutineScope,    private var onStart: (() -> Unit)? = null,    private var onTick: ((Int) -> Unit?)? = null,    private var onStop: (() -> Unit)? = null,    private var onFinish: (() -> Unit)? = null) : CountDownTimerImpl {    private var remainingTime: Int = 0    private var scope: CoroutineScope? = scope    private var job: Job? = null    private var stop = false    override fun start() {        resetConfig()        buildJob(total)    }    override fun reStart() {        resetConfig()        buildJob(--remainingTime)    }    override fun cancel() {        job?.cancel()    }    override fun stop() {        stop = true        job?.cancel()    }    override fun finish() {        job?.cancel()    }    private fun buildJob(time: Int) {        scope?.let { scope ->            job = flow {                for (i in time downTo 0) {                    emit(i)                    kotlinx.coroutines.delay(1000)                }            }.flowOn(Dispatchers.Main)                .onStart {                    if (stop.not()) {                        onStart?.invoke()                    }                }                .onCompletion {                    if (stop.not()) {                        onFinish?.invoke()                    } else {                        onStop?.invoke()                    }                }.onEach {                    remainingTime = it                    onTick?.invoke(it)                }.launchIn(scope)        }    }    private fun resetConfig() {        stop = false    }}
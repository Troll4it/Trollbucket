package troll.fitterimport android.app.Applicationimport android.content.ComponentCallbacksimport android.content.res.Configurationimport android.content.res.Resourcesimport troll.btc.extensions.checkNullimport troll.btc.log.TLogimport troll.btc.util.ScreenUtilsimport troll.fitter.strategy.AdaptStrategyimport java.lang.reflect.Field/** * author : TangPeng * date : 3/11/22 14:29 * description : */class FitterConfig {    companion object {        private var config: FitterConfig? = null            get() {                if (field == null) field = FitterConfig()                return field            }        fun get(): FitterConfig {            return config!!        }    }    var density: Float = 0f    var densityDpi: Int = 0    var scaledDensity: Float = 0f    var xdpi: Float = 0f    var screenWidthDp: Int = 0    var screenHeightDp: Int = 0    /**     * 屏幕方向，{ true: 纵向  false: 横向}     */    var isVertical: Boolean = true    /**     * 屏幕的总宽度，px     */    var screenWidth: Int = 0    /**     * 屏幕的总高度，px     */    var screenHeight: Int = 0    /**     * Mini 系统中的字段     */    var isMiui: Boolean = false    var temMetrics: Field? = null    /**     * 屏幕适配监听器，用于监听屏幕适配时的一些事件     */    var adaptListener: AdaptListener? = null    /**     * 此字段表示是否使用设备的实际尺寸做适配     * {@link useDeviceSize} 为 {@code true} 表示屏幕高度 {@link #mScreenHeight} 包含状态栏的高度     * {@link #useDeviceSize} 为 {@code false} 表示 {@link #mScreenHeight} 会减去状态栏的高度, 默认为 {@code true}     *     */    var useDeviceSize: Boolean = false    /**     *  true：以宽度等比例缩放     *  false：已高度等比例缩放     */    var baseWidth: Boolean = true    fun init(        application: Application,        baseWidth: Boolean = true,        strategy: AdaptStrategy? = null    ): FitterConfig {        application.checkNull()        this.baseWidth = baseWidth        val dm = Resources.getSystem().displayMetrics        density = dm.density        densityDpi = dm.densityDpi        scaledDensity = dm.scaledDensity        xdpi = dm.xdpi        val configuration = Resources.getSystem().configuration        screenWidthDp = configuration.screenWidthDp        screenHeightDp = configuration.screenHeightDp        //        setDesignWidth()        application.registerComponentCallbacks(object : ComponentCallbacks {            override fun onConfigurationChanged(p0: Configuration) {                if (p0 != null) {                    if (p0.fontScale > 0) {                        scaledDensity = Resources.getSystem().displayMetrics.scaledDensity                        TLog.i("屏幕缩放比例 ：：：$scaledDensity")                    }                }                // 判断屏幕是横向还是纵向                isVertical = p0.orientation == Configuration.ORIENTATION_PORTRAIT                val screenSize = ScreenUtils.getScreenSize(application)                screenWidth = screenSize[0]                screenHeight = screenSize[1]            }            override fun onLowMemory() {            }        })        TLog.d("initDensity = $density, initScaledDensity = $scaledDensity")//        mActivityLifecycleCallbacks = ActivityLifecycleCallbacksImpl(//            WrapperAutoAdaptStrategy(//                strategy ?: DefaultAutoAdaptStrategy()//            )//        )//        application.registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks)        val resourceName = application.resources.javaClass.simpleName        if ("MiuiResources" == resourceName || "XResources" == resourceName) {            isMiui = true            try {                temMetrics = Resources::class.java.getDeclaredField("mTmpMetrics")                temMetrics?.isAccessible = true            } catch (e: Exception) {            }        }        return this    }    /**     * 设置设配的基础参数     */    private fun setDesignWidth() {        //设置一个默认值, 避免在低配设备上因为获取 MetaData 过慢, 导致适配时未能正常获取到设计图尺寸        //建议使用者在低配设备上主动在 Application#onCreate 中调用 setDesignWidthInDp 替代以使用 AndroidManifest 配置设计图尺寸的方式        if (FitterConfig.get().)    }    /**     *  是否使用设备的实际尺寸     *  true：使用设备的实际尺寸（包含状态栏）false：不使用设备的实际尺寸     *     */    fun setUseDeviceSize(b: Boolean): FitterConfig {        useDeviceSize = b        return this    }    fun addAdaptListener(adaptListener: AdaptListener) {        this.adaptListener = adaptListener    }    var externalAdaptManager = ExternalAdaptManager()}
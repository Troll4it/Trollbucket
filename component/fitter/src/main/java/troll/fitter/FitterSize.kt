package troll.fitterimport android.annotation.SuppressLintimport android.app.Activityimport android.content.Contextimport android.content.res.Configurationimport android.content.res.Resourcesimport android.net.Uriimport android.util.DisplayMetricsimport troll.btc.extensions.isMainThread/** * author : TangPeng * date : 3/11/22 11:13 * description : */object FitterSize {    @SuppressLint("Recycle")    fun initCompatMultiProcess(context: Context) {        context.contentResolver.query(            Uri.parse("content://" + context.packageName + ".fitter-init-provider"),            null,            null,            null,            null        )    }    /**     * 取消适配     */    fun cancelAdapt(activity: Activity) {        if (isMainThread().not()) throw   Exception("not MainThread")        val xdpi = FitterConfig.get().xdpi    }    /**     * 初始化设置默认参数进行适配（AndroidManifest 的 meta属性）     */    fun autoConvertDensityOfGlobal(activity: Activity) {//        if (FitterConfig.get().baseWidth) {//            autoCoverDensityBaseWidth(activity,FitterConfig.get().screenWidthDp)//        } else {//            autoCoverDensityBaseHeight()//        }    }    private fun setDensity(        activity: Activity,        density: Float,        densityDpi: Int,        scaleDensity: Float,        xdpi: Float    ) {        val displayMetrics = activity.resources.displayMetrics        setDensity(displayMetrics, density, densityDpi)        val appDisplayMetrics = FitterConfig.get().application?.resources?.displayMetrics        if (appDisplayMetrics != null) {            setDensity(appDisplayMetrics, density, densityDpi)        }        // 兼容 MIUI        getMetricsOnMiui(activity.resources)            ?.let {                setDensity(it, density, densityDpi)            }        getMetricsOnMiui(FitterConfig.get().application?.resources)            ?.let {                setDensity(it, density, densityDpi)            }    }    private fun setDensity(        displayMetrics: DisplayMetrics,        density: Float,        densityDpi: Int    ) {        if (FitterConfig.get().unitManager.supportDp) {            displayMetrics.density = density            displayMetrics.densityDpi = densityDpi        }    }    private fun getMetricsOnMiui(resources: Resources?): DisplayMetrics? {        if (FitterConfig.get().isMiui && FitterConfig.get().temMetrics != null) {            return try {                FitterConfig.get().temMetrics?.get(resources) as DisplayMetrics            } catch (e: java.lang.Exception) {                null            }        }        return null    }    private fun setScreenSizeDp(activity: Activity, screenWidthDp: Int, screenHeightDp: Int) {        if (FitterConfig.get().unitManager.supportDp && FitterConfig.get().unitManager.supportDp) {            val configuration = activity.resources.configuration            setScreenSizeDp(configuration, screenWidthDp, screenHeightDp)        }    }    private fun setScreenSizeDp(        configuration: Configuration,        screenWidthDp: Int,        screenHeightDp: Int    ) {        configuration.screenHeightDp = screenHeightDp        configuration.screenWidthDp = screenWidthDp    }}
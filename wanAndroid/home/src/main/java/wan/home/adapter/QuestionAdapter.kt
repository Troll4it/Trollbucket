package wan.home.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.TextViewimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport troll.btc.extensions.onClickimport wan.home.bean.DailyQuestionDataimport wan.home.databinding.LayoutItemHomeQuestionBinding/** * author : TangPeng * date : 3/2/22 21:43 * description : */class QuestionAdapter(private val onClick: (DailyQuestionData) -> Unit) :    ListAdapter<DailyQuestionData, QuestionAdapter.QuestionViewHolder>(QuestionDiffCallback) {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): QuestionViewHolder {        val bd =            LayoutItemHomeQuestionBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return QuestionViewHolder(bd, onClick)    }    override fun onBindViewHolder(holder: QuestionViewHolder, position: Int) {        val item = getItem(position)        holder.bind(item)    }    class QuestionViewHolder(        bd: LayoutItemHomeQuestionBinding,        val onClick: (DailyQuestionData) -> Unit    ) : RecyclerView.ViewHolder(bd.root) {        private var currentArticle: DailyQuestionData? = null        private val tvTitle: TextView = bd.tvArticleTitle        private val tvAuthor: TextView = bd.tvArticleAuthor        private val tvTime: TextView = bd.tvHomeInfoTime        private val tvType: TextView = bd.btHealthInfoType        init {            bd.root.onClick { currentArticle?.let { onClick(it) } }        }        fun bind(data: DailyQuestionData) {            currentArticle = data            tvAuthor.text = data.author.ifEmpty {                data.shareUser            }            tvTime.text = data.niceDate            tvTitle.text = data.title            tvType.text = data.superChapterName        }    }}object QuestionDiffCallback : DiffUtil.ItemCallback<DailyQuestionData>() {    override fun areItemsTheSame(oldItem: DailyQuestionData, newItem: DailyQuestionData): Boolean {        return oldItem == newItem    }    override fun areContentsTheSame(        oldItem: DailyQuestionData,        newItem: DailyQuestionData    ): Boolean {        return oldItem.courseId == newItem.courseId    }}
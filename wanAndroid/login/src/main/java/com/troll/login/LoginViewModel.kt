package com.troll.loginimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.*import kotlinx.coroutines.launchimport troll.btc.extensions.SharedFlowEventsimport troll.btc.extensions.flowEventimport troll.btc.extensions.setStateimport troll.eth.base.viewbinding.BaseViewModel/** * author : TangPeng * date : 3/29/22 09:36 * description : */class LoginViewModel : BaseViewModel() {    private val _viewStates = MutableStateFlow(LoginViewState())    val viewStates = _viewStates.asStateFlow()    private val _viewEvents = SharedFlowEvents<LoginViewEvent>()    val viewEvent = _viewEvents.asSharedFlow()    fun dispatch(action: LoginViewAction) {        when (action) {            is LoginViewAction.RefreshPasswordTips -> refreshPasswordTips(action.password)            is LoginViewAction.Login -> login(action.account, action.password)        }    }    private fun refreshPasswordTips(password: String) {        _viewStates.setState { copy(password = password) }    }    /**     * 登录     */    private fun login(account: String, password: String) {        viewModelScope.launch {            flow {                delay(1000)                emit("登录成功")            }.onStart {                _viewEvents.flowEvent(LoginViewEvent.ShowLoading)            }.onEach {                _viewEvents.flowEvent(                    LoginViewEvent.DismissLoading,                    LoginViewEvent.ShowToast(it),                    LoginViewEvent.LoginSuccess                )            }.catch {                _viewEvents.flowEvent(                    LoginViewEvent.DismissLoading,                    LoginViewEvent.ShowToast("登录失败")                )            }.collect()        }    }}